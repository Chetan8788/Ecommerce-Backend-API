package com.functionalProgramming;

import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class Demo1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		List<Integer> list = List.of(12, 15, 13, 18, 20, 23, 35, 22, 18, 16, 16, 13, 20);
		
		// give me another list of odd numbers
		// using stream api
		
		List<Integer> odd = list.stream().filter(i -> i%2 != 0).toList();
		
		System.out.println("odd list : "+odd);
		
		// give me distinct elements list // distinct means no duplicates
		
		List<Integer> distinct = list.stream().distinct().collect(Collectors.toList());
		
		System.out.println("distinct list : "+distinct);
		
		// give me list of the square of all odd elements
		
		List<Integer> square = list.stream().filter(i -> i%2 != 0).map(i -> i*i).collect(Collectors.toList());
		
		System.out.println("square odd list : "+square);
		
		// find the greatest number from list
		
		Optional<Integer> opt = list.stream().max((n1,n2) -> Integer.compare(n1, n2));
		
		if(opt.isPresent()) {
			System.out.println(opt.get());
		}else {
			System.out.println("list is empty...");
		}
		
		// we have list of string of lower case
		// convert it into into upper case
		
		List<String> strings = List.of("chetan","masai","amol","tejas");
		
		strings.stream().map(i -> i.toUpperCase()).forEach(i-> {
			System.out.println(i);
		});
		
		// sum of all elements in list
		
		int sum = list.stream().reduce(0,(a,b) -> a+b);
		
		System.out.println("sum : "+sum);
		
		// product of all elements in list
		
        int product = list.stream().reduce(1,(a,b) -> a*b);
		
		System.out.println("product : "+product);
		
	     
		// find the lowest number from list
		// if list is empty then print 0;
		
		int low = list.stream().min((n1,n2) -> Integer.compare(n1, n2)).orElse(0);
		
		System.out.println(low);

		
// @formatter:on

	}

}
